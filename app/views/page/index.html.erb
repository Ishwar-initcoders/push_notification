<h1>Page#index</h1>
<p>Find me in app/views/page/index.html.erb</p>

<button onclick="notifyMe()">Notify me!</button>

<div class="callout">
  <div id="push-simple-app">
    <button class="send-notification-button btn waves-effect waves-light" onclick="sendNotification();">Send notification</button>
  </div>
</div>

<script type="text/javascript">
  // var publicKey = new Uint8Array(<%#= WebpushClient.public_key %>);
</script>
<script type="text/javascript">

	ready();
	
	// function ready() {
	//   if (navigator.serviceWorker) {
	//     console.log('Registering serviceworker');
	//     navigator.serviceWorker.register('/serviceworker.js.erb')
	//       .then(function(reg) {
	//       	console.log(reg)
	//         console.log(reg.scope, 'register');
	//         console.log('Service worker change, registered the service worker');
	//   		setup(logSubscription);
	//       });
	//   } else {
	//     alertSWSupport();
	//   }
	// }
	

	function ready(){
		navigator.serviceWorker.ready.then(function(sw) {
		  Notification.requestPermission(function(permission) {
		    if(permission !== 'denied') {
		      sw.pushManager.subscribe({userVisibleOnly: true}).then(function(s) {
		        var data = {
		          endpoint: s.endpoint,
		          p256dh: btoa(String.fromCharCode.apply(null, new Uint8Array(s.getKey('p256dh')))).replace(/\+/g, '-').replace(/\//g, '_'),
		          auth: btoa(String.fromCharCode.apply(null, new Uint8Array(s.getKey('auth')))).replace(/\+/g, '-').replace(/\//g, '_')
		        }
		        console.log(data);
		      });
		    }
		  });
		});
	}



//  alert once .js file start
	function alertOnce(labelSuffix, message) {
	  if (!localStorage) {
	    alert(message);
	    return false;
	  }

	  const label = `alerted-${labelSuffix}`;
	  const alerted = localStorage.getItem(label) || '';

	  if (alerted != "yes") {
	    localStorage.setItem(label, 'yes');
	    alert(message);
	  }

	  return true;
	}

	function alertSWSupport() {
	  return alertOnce("serviceWorker", "Sorry but the browser you're using does not support Service Workers yet! Check out caniuse.com to learn moreabout browser support");
	}
// alert once .js file end



	function setup(onSubscribed) {
	  console.log('Setting up push subscription');

	  if (!window.PushManager) {
	    console.warn('Push messaging is not supported in your browser');
	  }

	  if (!ServiceWorkerRegistration.prototype.showNotification) {
	    console.warn('Notifications are not supported in your browser');
	    return;
	  }

	  if (Notification.permission !== 'granted') {
	    Notification.requestPermission(function (permission) {
	      // If the user accepts, let's create a notification
	      if (permission === "granted") {
	        console.log('Permission to receive notifications granted!');
	        subscribe(onSubscribed);
	      }
	    });
	    return;
	  } else {
	    console.log('Permission to receive notifications granted!');
	    subscribe(onSubscribed);
	  }
	}

	function subscribe(onSubscribed) {
	  navigator.serviceWorker.ready.then((serviceWorkerRegistration) => {
	    const pushManager = serviceWorkerRegistration.pushManager
	    pushManager.getSubscription()
	    .then((subscription) => {
	      if (subscription) {
	        refreshSubscription(pushManager, subscription, onSubscribed);
	      } else {
	        pushManagerSubscribe(pushManager, onSubscribed);
	      }
	    })
	  });
	}

	function refreshSubscription(pushManager, subscription, onSubscribed) {
	  console.log('Refreshing subscription');
	  return subscription.unsubscribe().then((bool) => {
	    pushManagerSubscribe(pushManager);
	  });
	}

	function pushManagerSubscribe(pushManager, onSubscribed) {
	  console.log('Subscribing started...');

	  pushManager.subscribe({
	    userVisibleOnly: true,
	    applicationServerKey: window.publicKey
	  })
	  .then(onSubscribed)
	  .then(() => { console.log('Subcribing finished: success!')})
	  .catch((e) => {
	    if (Notification.permission === 'denied') {
	      console.warn('Permission to send notifications denied');
	    } else {
	      console.error('Unable to subscribe to push', e);
	    }
	  });
	}

	function logSubscription(subscription) {
	  console.log("Current subscription", subscription.toJSON());
	}

	function getSubscription() {
	  return navigator.serviceWorker.ready
	  .then((serviceWorkerRegistration) => {
	    return serviceWorkerRegistration.pushManager.getSubscription()	
	    .catch((error) => {
	      console.warn('Error during getSubscription()', error);
	    });
	  });
	}

	function sendNotification() {				
	  getSubscription().then((subscription) => {
	    return fetch("/push", {
	      headers: formHeaders(),
	      method: 'POST',
	      credentials: 'include',
	      body: JSON.stringify({ subscription: subscription.toJSON() })
	    }).then((response) => {
	      console.log("Push response", response);
	      if (response.status >= 500) {
	        console.error(response.statusText);
	        alert("Sorry, there was a problem sending the notification. Try resubscribing to push messages and resending.");
	      }
	    })
	    .catch((e) => {
	      console.error("Error sending notification", e);
	    });
	  })
	}

	function formHeaders() {
	  return new Headers({
	    'Content-Type': 'application/json',
	    'X-Requested-With': 'XMLHttpRequest',
	    'X-CSRF-Token': authenticityToken(),
	  });
	}

	function authenticityToken() {
	  return document.querySelector('meta[name=csrf-token]').content;
	}	

</script>
